@page "/new-order"
@using FlowerShopLibrary
@inject FlowerProductList ProductList
@inject OrderList OrderList
@inject NavigationManager NavigationManager

<style>
    body {
        font-family: "Hurricane", cursive;
        font-weight: 400;
        font-style: normal;
        background-color: #ffffff;
        margin: 0;
        padding: 0;
        background-image: url('https://img.freepik.com/free-vector/watercolor-floral-background-with-soft-colors_52683-28620.jpg'); /* Specify the image path here */
        background-size: cover; /* Ensures the image covers the entire screen */
        background-position: center center; /* Centers the image */
        background-attachment: fixed; /* Ensures the background image doesn't scroll */
    }

    form {
        background: #f8f7f6;
        background-color: #f8f7f6;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        max-width: 450px;
        margin: auto;
        font-family: Arial, sans-serif;
    }
    

    h3 {
        text-align: center;
        color: #333;
        margin-bottom: 20px;
        font-size: 22px;
    }

    h4 {
        margin-top: 20px;
        margin-bottom: 10px;
        font-size: 18px;
        color: #555;
    }

    .form-group {
        margin-bottom: 15px;
    }

    label {
        display: block;
        font-size: 14px;
        margin-bottom: 5px;
        color: #333;
    }

    input[type="text"],
    select {
        width: 100%;
        padding: 10px;
        font-size: 14px;
        border: 1px solid #ddd;
        border-radius: 4px;
        box-sizing: border-box;
        background: #f9f9f9;
    }

        input[type="text"]:focus,
        select:focus {
            border-color: #007bff;
            background: #ffffff;
            outline: none;
        }

    .radio-option {
        display: block;
        margin-bottom: 10px;
        font-size: 14px;
        color: #444;
    }

    button {
        width: 100%;
        padding: 10px;
        font-size: 16px;
        color: #fff;
        background-color: #007bff;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.3s;
    }

        button:hover {
            background-color: #0056b3;
        }

        button:focus {
            outline: none;
        }
</style>

<h3>Create a New Order</h3>


<form>
    <label>Name: <input @bind="customerName" /></label><br />
    <label>Address: <input @bind="customerAddress" /></label><br />
    <label>Phone: <input @bind="customerPhone" /></label><br />

    <h4>Select Bouquet Size</h4>
    @foreach (var sizeOption in Enum.GetValues(typeof(Size)).Cast<Size>())
    {
        <label>
            <input type="radio"
                   name="bouquetSize"
                   @onchange="() => OnSizeChanged(sizeOption)"
                   checked="@(selectedSize == sizeOption)" />
            @($"{sizeOption} ({(int)sizeOption} flowers)")
        </label>
        <br />
    }

    <h4>Select Flowers</h4>
    @for (int i = 0; i < selectedFlowers.Count; i++)
    {
        <select @onchange="(e) => OnFlowerChanged(i, e.Value?.ToString())">
            <option value="0">-- Select Flower --</option>
            @foreach (var flower in ProductList.AvailableFlowers)
            {
                <option value="@flower.ProductID" selected="@(selectedFlowers[i] == flower.ProductID)">
                    @flower.Name
                </option>
            }
        </select>
        <br />
    }

    <button type="button" @onclick="SubmitOrder">Submit Order</button>
    
</form>

@code {
    private string customerName;
    private string customerAddress;
    private string customerPhone;
    private Size selectedSize = Size.Small;
    private List<int> selectedFlowers = new List<int>();

    protected override void OnInitialized()
    {
        UpdateSelectedFlowers((int)selectedSize);
    }

    private void UpdateSelectedFlowers(int size)
    {
        if (size < selectedFlowers.Count)
        {
            // Trim the list
            selectedFlowers = selectedFlowers.Take(size).ToList();
        }
        else if (size > selectedFlowers.Count)
        {
            // Expand the list with default values
            selectedFlowers.AddRange(Enumerable.Repeat(0, size - selectedFlowers.Count));
        }
    }


    private void OnSizeChanged(Size newSize)
    {
        selectedSize = newSize;
        UpdateSelectedFlowers((int)newSize);
        StateHasChanged(); // Re-render UI with updated list
    }


    private void SubmitOrder()
    {
        // Basic validation
        if (string.IsNullOrWhiteSpace(customerName) ||
            string.IsNullOrWhiteSpace(customerAddress) ||
            string.IsNullOrWhiteSpace(customerPhone))
        {
            return;
        }

        // Check if at least one flower is selected
        if (selectedFlowers.All(f => f == 0))
        {
            return;
        }

        // Create customer
        var customer = new Customer(
            OrderList.GetOrderCount() + 1,
            customerName,
            customerAddress,
            customerPhone
        );

        // Create flower arrangement
        var arrangement = new FlowerArrangement(selectedSize);

        foreach (var flowerId in selectedFlowers)
        {
            if (flowerId == 0) continue;
            var flower = ProductList.GetFlowerProduct(flowerId);
            arrangement.AddFlower(flower);
        }

        // Create and save order
        var order = new Order(customer, OrderList.GetOrderCount() + 1);
        order.AddArrangement(arrangement);
        OrderList.AddOrder(order);

        // Navigate to orders page
        NavigationManager.NavigateTo("/orders");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (selectedFlowers.Count != (int)selectedSize)
        {
            Console.WriteLine($"[OnAfterRender] Resynchronizing selectedFlowers. Current count: {selectedFlowers.Count}, Expected count: {(int)selectedSize}");
            UpdateSelectedFlowers((int)selectedSize);
            StateHasChanged(); // Trigger a re-render after fixing the state
        }
    }

    private void OnFlowerChanged(int index, string selectedValue)
    {
        if (index >= 0 && index < selectedFlowers.Count)
        {
            Console.WriteLine($"[OnFlowerChanged] Changing flower at index {index} to {selectedValue}");
            selectedFlowers[index] = int.TryParse(selectedValue, out var value) ? value : 0;
        }
        else
        {
            Console.WriteLine($"[OnFlowerChanged] Index out of range: {index}");
        }
    }

}